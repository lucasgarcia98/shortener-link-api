<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Login e Cadastro</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">
  <style>
    .poppins-thin {
      font-family: "Poppins", sans-serif;
      font-weight: 100;
      font-style: normal;
    }

    .poppins-extralight {
      font-family: "Poppins", sans-serif;
      font-weight: 200;
      font-style: normal;
    }

    .poppins-light {
      font-family: "Poppins", sans-serif;
      font-weight: 300;
      font-style: normal;
    }

    .poppins-regular {
      font-family: "Poppins", sans-serif;
      font-weight: 400;
      font-style: normal;
    }

    .poppins-medium {
      font-family: "Poppins", sans-serif;
      font-weight: 500;
      font-style: normal;
    }

    .poppins-semibold {
      font-family: "Poppins", sans-serif;
      font-weight: 600;
      font-style: normal;
    }

    .poppins-bold {
      font-family: "Poppins", sans-serif;
      font-weight: 700;
      font-style: normal;
    }

    .poppins-extrabold {
      font-family: "Poppins", sans-serif;
      font-weight: 800;
      font-style: normal;
    }

    .poppins-black {
      font-family: "Poppins", sans-serif;
      font-weight: 900;
      font-style: normal;
    }

    .poppins-thin-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 100;
      font-style: italic;
    }

    .poppins-extralight-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 200;
      font-style: italic;
    }

    .poppins-light-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 300;
      font-style: italic;
    }

    .poppins-regular-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 400;
      font-style: italic;
    }

    .poppins-medium-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 500;
      font-style: italic;
    }

    .poppins-semibold-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 600;
      font-style: italic;
    }

    .poppins-bold-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 700;
      font-style: italic;
    }

    .poppins-extrabold-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 800;
      font-style: italic;
    }

    .poppins-black-italic {
      font-family: "Poppins", sans-serif;
      font-weight: 900;
      font-style: italic;
    }
  </style>
  <style>
    * {
      font-weight: 400;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f4f4f4;
      display: flex;
      justify-content: center;
      align-items: start;
      height: 100vh;
      margin: 0;
    }

    .container {
      display: flex;
      width: 100%;
      flex-direction: column;
      align-items: center;
    }

    .container-form {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 400px;
    }

    .container-shortener {
      background-color: white;
      padding: 1rem;
      margin-top: 1rem;
    }

    h2 {
      text-align: center;
      font-weight: 600;
      color: #333;
    }

    form {
      display: flex;
      flex-direction: column;
    }

    input[type="email"],
    input[type="password"],
    input[type="text"] {
      padding: 10px;
      margin: 10px 0;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    button {
      padding: 10px;
      background-color: #007BFF;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-top: 10px;
    }

    button:hover {
      background-color: #0056b3;
    }

    .toggle-link {
      color: #007BFF;
      cursor: pointer;
      text-align: center;
      margin-top: 10px;
    }

    .text-shortener {
      text-align: center;
      margin-bottom: 10px;
      font-weight: 600;
    }

    .container-logged {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 400px;
      display: flex;
      flex-direction: column;
      justify-content: start;
      align-items: center;
      column-gap: 1rem;
    }

    .container-logged .informations {
      display: flex;
      flex-direction: row;
      column-gap: 1rem;
      justify-content: space-between;
      width: 100%;
    }

    .text-logged {
      text-align: center;
      font-weight: 600;
    }

    #logout-btn {
      margin-top: 0;
    }

    .container-reset-password {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 400px;
    }

    .container-shortener {
      display: flex;
      flex-direction: column;
      align-items: start;
      background-color: white;
      padding: 1rem;
      margin-top: 1rem;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 400px;
    }

    #action-form {
      margin-top: 20px;
      width: 100%;
    }

    .list-urls {
      margin-top: 20px;
      width: 100%;
    }

    .list-urls table {
      width: 100%;
      border-collapse: collapse;
    }

    .list-urls th,
    .list-urls td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    .list-urls th {
      background-color: #007BFF;
      color: white;
    }


    .hidden {
      display: none;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="container-form">
      <h2 id="form-title">Login</h2>
      <form id="auth-form">
        <input type="email" id="email" placeholder="Email" required />
        <input type="password" id="password" placeholder="Senha" required />
        <input type="hidden" id="action" value="login" />
        <button type="submit" id="submit-btn">Entrar</button>
      </form>
      <div class="toggle-link" id="toggle-link">Criar uma conta</div>
      <div class="toggle-link" id="reset-password-link">Redefinir senha</div>
    </div>
    <div class="container-reset-password hidden">
      <h2>Redefinir senha</h2>
      <form id="reset-password-form">
        <input type="email" id="reset-password-email" placeholder="Email" required />
        <input type="password" id="reset-password-password" placeholder="Senha" required />
        <button type="submit" id="reset-password-btn">Enviar</button>
      </form>
    </div>
    <div class="container-logged hidden">
      <div class="informations">
        <label>Bem-vindo <label class="text-logged"></label></label>
        <button id="logout-btn">Sair</button>
      </div>

    </div>
    <div class="container-shortener">
      <label class="text-shortener">Encurtar URL</label>
      <label id="shortener-url" class="hidden">URL Encurtada: <a target="_blank"></a></label>
      <form id="action-form" style="margin-top: 20px;">
        <input type="text" id="action-input" placeholder="Insira a URL" required />
        <button type="submit" id="action-btn">Enviar</button>
      </form>
    </div>
    <div class="container-urls hidden">
      <div class="list-urls">
        <table>
          <thead>
            <tr>
              <th>Atualizado em:</th>
              <th>URL Original</th>
              <th>URL Encurtada</th>
              <th>Número de acessos</th>
              <th>Ações</th>
            </tr>
          </thead>
          <tbody id="table-body">
            <tr>
              <td colspan="3">Nenhuma URL encontrada</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <script>
    const authForm = document.getElementById('auth-form')
    const toggleLink = document.getElementById('toggle-link')
    const formTitle = document.getElementById('form-title')
    const submitBtn = document.getElementById('submit-btn')
    const logoutBtn = document.getElementById('logout-btn')
    const resetPasswordForm = document.getElementById('reset-password-form')
    const resetPasswordLink = document.getElementById('reset-password-link')
    const actionForm = document.getElementById('action-form')

    let isLogin = true

    toggleLink.addEventListener('click', () => {
      isLogin = !isLogin
      if (isLogin) {
        formTitle.textContent = 'Login'
        submitBtn.textContent = 'Entrar'
        toggleLink.textContent = 'Criar uma conta'
      } else {
        formTitle.textContent = 'Criar Conta'
        submitBtn.textContent = 'Cadastrar'
        toggleLink.textContent = 'Já tenho uma conta'
      }
    })

    resetPasswordLink.addEventListener('click', () => {
      document.querySelector('.container-form').classList.add('hidden')
      document.querySelector('.container-reset-password').classList.remove('hidden')
    })

    async function login({ email, password }) {
      return fetch('/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      }).then((res) => res.json())
    }

    authForm.addEventListener('submit', async (e) => {
      e.preventDefault()
      const email = document.getElementById('email').value
      const password = document.getElementById('password').value
      if (isLogin) {
        const dataLogin = await login({ email, password })

        if (dataLogin?.error) {
          alert(dataLogin.message)
          return
        }

        if (dataLogin.access_token) {
          localStorage.setItem('access_token', dataLogin.access_token)
          validateAcessToken()
          alert('Login efetuado com sucesso')
        }
      } else {
        const register = await fetch('/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password }),
        }).then((res) => res.json())

        if (register?.error) {
          alert(register.message)
          return
        }

        if (register.id) {
          const dataLogin = await login({ email, password })
          if (dataLogin?.error) {
            alert(dataLogin.message)
            return
          }

          if (dataLogin.access_token) {
            localStorage.setItem('access_token', dataLogin.access_token)
            validateAcessToken()
            alert('Login efetuado com sucesso')
          }
        }
      }
    })

    function parseJwt(token) {
      var base64Url = token.split('.')[1]
      var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')
      var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)
      }).join(''))

      return JSON.parse(jsonPayload)
    }


    function validateAcessToken() {
      const access_token = localStorage.getItem('access_token')

      if (access_token) {
        const containerForm = document.querySelector('.container-form')
        const containerLogged = document.querySelector('.container-logged')
        containerForm.classList.add('hidden')
        containerLogged.classList.remove('hidden')
        const textLogged = document.querySelector('.text-logged')

        const parsedJwt = parseJwt(access_token)

        textLogged.textContent = parsedJwt['email']
        fillTableUrls()
      } else {
        const containerForm = document.querySelector('.container-form')
        const containerLogged = document.querySelector('.container-logged')
        containerForm.classList.remove('hidden')
        containerLogged.classList.add('hidden')
      }

    }
    validateAcessToken()

    logoutBtn.addEventListener('click', () => {
      localStorage.removeItem('access_token')

      window.location.reload()
    })

    resetPasswordForm.addEventListener('submit', async (e) => {
      e.preventDefault()
      const email = document.getElementById('reset-password-email').value
      const password = document.getElementById('reset-password-password').value
      const response = await fetch('/users/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      }).then((res) => res.json())

      if (response?.error) {
        alert(response.message)
        return
      }
      alert('Senha alterada com sucesso')
      document.querySelector('.container-reset-password').classList.add('hidden')
      document.querySelector('.container-form').classList.remove('hidden')
    })

    actionForm.addEventListener('submit', async (e) => {
      e.preventDefault()
      const url = document.getElementById('action-input').value
      const access_token = localStorage.getItem('access_token')

      const response = await fetch('/url-shortener', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(access_token && { 'Authorization': `Bearer ${access_token}` }),

        },
        body: JSON.stringify({ urlOriginal: url }),
      }).then((res) => res.json())

      if (response?.error) {
        alert(response.message)
        return
      }

      alert('URL encurtada com sucesso')
      const shortenerUrl = document.getElementById('shortener-url')
      shortenerUrl.classList.remove('hidden')
      shortenerUrl.querySelector('a').textContent = response.urlShort
      shortenerUrl.querySelector('a').href = response.urlShort

      fillTableUrls()
    })

    const containerUrls = document.querySelector('.container-urls')
    const tableBody = document.getElementById('table-body')

    function fillTableUrls() {
      fetch('/url-shortener/all', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        },
      }).then((res) => res.json())
        .then((data) => {
          tableBody.innerHTML = ''
          data.forEach((row) => {
            const tr = document.createElement('tr')
            tr.innerHTML = `
              <td>${new Date(row.updatedAt).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) || row.updatedAt}</td>
              <td><a target="_blank" href="${row.urlOriginal}">${row.urlOriginal}</a></td>
              <td><a target="_blank" href="${row.urlShort}">${row.urlShort}</a></td>
              <td>${row.clicks}</td>
              <td>
                <button class="edit-btn" data-id="${row.id}">Editar</button>
                <button class="delete-btn" data-id="${row.id}">Deletar</button>
              </td>
            `
            tableBody.appendChild(tr)
            containerUrls.classList.remove('hidden')
          })

        })

    }

    tableBody.addEventListener('click', (e) => {
      if (e.target.classList.contains('edit-btn')) {
        const novaUrl = prompt('Insira a nova URL')
        if (novaUrl) {
          const id = e.target.dataset.id

          fetch(`/url-shortener/${id}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('access_token')}`
            },
            body: JSON.stringify({ novaUrl }),
          }).then((res) => res.json())
            .then((data) => {
              if (data.error) {
                alert(data.message)
                return
              }

              alert('URL editada com sucesso')
              fillTableUrls()
            })
        }
      } else if (e.target.classList.contains('delete-btn')) {
        const id = e.target.dataset.id
        const confirmDelete = confirm('Tem certeza que deseja deletar essa URL?')
        if (!confirmDelete) return
        fetch(`/url-shortener/${id}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
          },
        }).then((res) => res.json())
          .then((data) => {
            if (data.error) {
              alert(data.message)
              return
            }
            alert('URL deletada com sucesso')
            fillTableUrls()
          })
      }
    })


  </script>
</body>

</html>